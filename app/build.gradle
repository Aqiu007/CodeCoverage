plugins {
    // 构建应用
    id 'com.android.application'
    // 构建module
    // id 'com.android.library'
    // 集成 jacoco
    id 'jacoco'
}

jacoco {
    toolVersion '0.8.7'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.joyy.codecoverage"  // app的唯一标识
        minSdk 21  // SDK最低支持版本
        targetSdk 32  // 目标SDK版本，如果目标设备的API版本正好等于此数值，就不会为此程序开启兼容性检查判断的工作
        versionCode 5 // 版本号
        versionName "0.0.5" // 版本名称

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // 编译类型
    // 下面声明了 release 和 debug 两种类型，名字可以随意
    buildTypes {
        // 构建发布版本
        release {
            // 是否开启混淆
            minifyEnabled false
            // 混淆规则文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        // 构建 debug版本
        debug {
            // 开启覆盖率插桩
            testCoverageEnabled true
        }
        otherBuildType {

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '30.0.2' // 编译工具的版本
    compileSdkVersion 31  // 编译时使用的SDK版本
}

// 源代码路径
def coverageSourceDirs = [
        '../app/src/main/java'
]
task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories.from = fileTree(
            dir: './build/intermediates/javac/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = files("$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec")

    doFirst {
        new File("$buildDir/intermediates/javac/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

dependencies {
    // 依赖本地的jar
    implementation fileTree(dir: 'libs', include: ['*.jar']) // 这句代码会自动依赖本地的所有jar，就不要逐个依赖了
    // 利用gradle远程的依赖管理
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    // 本地的module库
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation files('libs/aardemo-debug.aar')
}

